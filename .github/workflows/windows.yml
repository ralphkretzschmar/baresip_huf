name: Windows

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Debug",
            os: windows-2022,
            environment_script: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat",
            build: "Debug",
            openssl: true,
            openssl_version: "3.5.2",
            disable_openssl: "OFF",
            testing: true
          }
        - {
            name: "Windows Release",
            os: windows-2022,
            environment_script: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat",
            build: "Release",
            openssl: true,
            openssl_version: "3.5.2",
            disable_openssl: "OFF",
            testing: true
          }
        - {
            name: "Windows Debug ARM64",
            os: windows-2022,
            environment_script: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsamd64_arm64.bat",
            build: "Debug",
            openssl: false,
            disable_openssl: "ON",
            testing: false
          }

    steps:
      - uses: actions/checkout@v5

      - name: Install OpenSSL
        if: ${{ matrix.config.openssl }}
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          function Test-ChocoSuccess {
            param([int]$Code)
            return ($Code -eq 0 -or $Code -eq 3010)
          }

          $extraPackages = '${{ matrix.config.choco }}'
          if (-not [string]::IsNullOrWhiteSpace($extraPackages)) {
            choco install --no-progress $extraPackages
            if (-not (Test-ChocoSuccess $LASTEXITCODE)) {
              throw "Failed to install Chocolatey packages: $extraPackages (exit code $LASTEXITCODE)"
            }
          }

          $preferredVersion = '${{ matrix.config.openssl_version }}'
          if ([string]::IsNullOrWhiteSpace($preferredVersion)) {
            $preferredVersion = '3.5.2'
          }

          Write-Host "Attempting to install OpenSSL $preferredVersion from Chocolatey."
          choco install --no-progress openssl --version $preferredVersion
          $installExit = $LASTEXITCODE

          if (Test-ChocoSuccess $installExit) {
            Write-Host "OpenSSL $preferredVersion installed successfully."
            return
          }

          Write-Warning "OpenSSL $preferredVersion could not be installed (exit code $installExit). Falling back to the latest available package."
          choco uninstall --yes openssl | Out-Null

          choco install --no-progress openssl
          $fallbackExit = $LASTEXITCODE

          if (-not (Test-ChocoSuccess $fallbackExit)) {
            throw "Fallback installation of OpenSSL failed with exit code $fallbackExit."
          }

          Write-Host "Installed the latest available OpenSSL package from Chocolatey (exit code $fallbackExit)."

      - uses: sreimers/pr-dependency-action@v1
        with:
          name: re
          repo: https://github.com/baresip/re
          secret: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GTK3 dependencies
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $prefix = 'C:\msys64\mingw64'
          C:\msys64\usr\bin\bash.exe -lc "pacman -Sy --noconfirm --needed mingw-w64-x86_64-gtk3 mingw-w64-x86_64-pkgconf"
          Add-Content -Path $env:GITHUB_PATH -Value "$prefix\bin"
          Add-Content -Path $env:GITHUB_ENV -Value ("PKG_CONFIG_PATH=" + $prefix.Replace('\\','/') + "/lib/pkgconfig;" + $prefix.Replace('\\','/') + "/share/pkgconfig")
          Add-Content -Path $env:GITHUB_ENV -Value "PKG_CONFIG_EXECUTABLE=$prefix\bin\pkg-config.exe"
          Add-Content -Path $env:GITHUB_ENV -Value "INCLUDE=$prefix\include;$env:INCLUDE"
          Add-Content -Path $env:GITHUB_ENV -Value "LIB=$prefix\lib;$env:LIB"
          Add-Content -Path $env:GITHUB_ENV -Value "CMAKE_PREFIX_PATH=$prefix;$env:CMAKE_PREFIX_PATH"

      - name: make re
        shell: cmd
        run: |
          call "${{ matrix.config.environment_script }}"
          if not exist re\include mkdir re\include
          copy /Y include\msvc_compat\unistd.h re\include\unistd.h
          cmake -S re -B re/build -G "Ninja" -DCMAKE_DISABLE_FIND_PACKAGE_OpenSSL=${{ matrix.config.disable_openssl }}
          if not exist re\build\include mkdir re\build\include
          copy /Y include\msvc_compat\unistd.h re\build\include\unistd.h
          cmake --build re/build -j
          mv re ../.

      - name: Build
        shell: cmd
        run: |
          call "${{ matrix.config.environment_script }}"
          cmake -S . -B build -G "Ninja" -DCMAKE_C_FLAGS="/WX" -DCMAKE_BUILD_TYPE=${{ matrix.config.build }} -DCMAKE_DISABLE_FIND_PACKAGE_OpenSSL=${{ matrix.config.disable_openssl }}
          cmake --build build -j

      - name: Verify GTK module detection
        shell: cmd
        run: |
          call "${{ matrix.config.environment_script }}"
          cmake -LA build | findstr /R /C:"MODULES_DETECTED:INTERNAL=.*gtk"

      - name: selftest
        if: ${{ matrix.config.testing }}
        shell: cmd
        run: |
          build\test\selftest.exe
