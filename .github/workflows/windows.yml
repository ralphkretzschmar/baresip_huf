name: Windows

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Debug",
            os: windows-2022,
            environment_script: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat",
            build: "Debug",
            openssl: true,
            disable_openssl: "OFF",
            testing: true
          }
        - {
            name: "Windows Release",
            os: windows-2022,
            environment_script: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat",
            build: "Release",
            openssl: true,
            disable_openssl: "OFF",
            testing: true
          }
        - {
            name: "Windows Debug ARM64",
            os: windows-2022,
            environment_script: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsamd64_arm64.bat",
            build: "Debug",
            openssl: false,
            disable_openssl: "ON",
            testing: false
          }

    steps:
      - uses: actions/checkout@v5

      - name: Install OpenSSL dependencies
        if: ${{ matrix.config.openssl }}
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          $vcpkgRoot = Join-Path $env:RUNNER_TEMP 'vcpkg'
          if (Test-Path $vcpkgRoot) {
            Remove-Item -Recurse -Force $vcpkgRoot
          }

          git clone --depth 1 https://github.com/microsoft/vcpkg $vcpkgRoot

          & "$vcpkgRoot\bootstrap-vcpkg.bat" -disableMetrics

          & "$vcpkgRoot\vcpkg.exe" install openssl:x64-windows

          $toolchainFile = Join-Path $vcpkgRoot 'scripts\buildsystems\vcpkg.cmake'
          Add-Content -Path $env:GITHUB_ENV -Value "VCPKG_ROOT=$vcpkgRoot"
          Add-Content -Path $env:GITHUB_ENV -Value "CMAKE_TOOLCHAIN_FILE=$toolchainFile"
          Add-Content -Path $env:GITHUB_ENV -Value "VCPKG_DEFAULT_TRIPLET=x64-windows"

      - uses: sreimers/pr-dependency-action@v1
        with:
          name: re
          repo: https://github.com/baresip/re
          secret: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GTK3 dependencies
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $prefix = 'C:\msys64\mingw64'
          C:\msys64\usr\bin\bash.exe -lc "pacman -Sy --noconfirm --needed mingw-w64-x86_64-gtk3 mingw-w64-x86_64-pkgconf"
          Add-Content -Path $env:GITHUB_PATH -Value "$prefix\bin"
          Add-Content -Path $env:GITHUB_ENV -Value ("PKG_CONFIG_PATH=" + $prefix.Replace('\\','/') + "/lib/pkgconfig;" + $prefix.Replace('\\','/') + "/share/pkgconfig")
          Add-Content -Path $env:GITHUB_ENV -Value "PKG_CONFIG_EXECUTABLE=$prefix\bin\pkg-config.exe"
          Add-Content -Path $env:GITHUB_ENV -Value "INCLUDE=$prefix\include;$env:INCLUDE"
          Add-Content -Path $env:GITHUB_ENV -Value "LIB=$prefix\lib;$env:LIB"
          Add-Content -Path $env:GITHUB_ENV -Value "CMAKE_PREFIX_PATH=$prefix;$env:CMAKE_PREFIX_PATH"

      - name: make re
        shell: cmd
        run: |
          call "${{ matrix.config.environment_script }}"
          if not exist re\include mkdir re\include
          copy /Y include\msvc_compat\unistd.h re\include\unistd.h
          set "TOOLCHAIN_ARG="
          if defined CMAKE_TOOLCHAIN_FILE set "TOOLCHAIN_ARG=-DCMAKE_TOOLCHAIN_FILE=""%CMAKE_TOOLCHAIN_FILE%"""
          cmake -S re -B re/build -G "Ninja" %TOOLCHAIN_ARG% -DCMAKE_DISABLE_FIND_PACKAGE_OpenSSL=${{ matrix.config.disable_openssl }}
          if not exist re\build\include mkdir re\build\include
          copy /Y include\msvc_compat\unistd.h re\build\include\unistd.h
          cmake --build re/build -j
          mv re ../.

      - name: Build
        shell: cmd
        run: |
          call "${{ matrix.config.environment_script }}"
          set "TOOLCHAIN_ARG="
          if defined CMAKE_TOOLCHAIN_FILE set "TOOLCHAIN_ARG=-DCMAKE_TOOLCHAIN_FILE=""%CMAKE_TOOLCHAIN_FILE%"""
          cmake -S . -B build -G "Ninja" %TOOLCHAIN_ARG% -DCMAKE_C_FLAGS="/WX" -DCMAKE_BUILD_TYPE=${{ matrix.config.build }} -DCMAKE_DISABLE_FIND_PACKAGE_OpenSSL=${{ matrix.config.disable_openssl }}
          cmake --build build -j

      - name: Verify GTK module detection
        shell: cmd
        run: |
          call "${{ matrix.config.environment_script }}"
          cmake -LA build | findstr /R /C:"MODULES_DETECTED:INTERNAL=.*gtk"

      - name: selftest
        if: ${{ matrix.config.testing }}
        shell: cmd
        run: |
          build\test\selftest.exe
